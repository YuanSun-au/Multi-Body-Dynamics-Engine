function TestFile_44_EventDetection()
    % Define timing and intial parameters:
    t_end   = 1.0;
    delta_t = 0.01;
    q_0     = [1; 1; pi/4];
    q_dot_0 = [0; 0; 0];
    m     = 0.5;
    theta =  1;
    grav  = 9.81;
    d     = 0;
    s     = 0.5; % [m]
    % Combined vector of initial generalized positions and velocities:
    y_0 = [q_0; q_dot_0];
    % Set up options with our event function:
    options = odeset('Events',@events);

    % run simulation/integration
    [t, y] = ode45(@ODE, 0:delta_t:t_end, y_0, options);

    % Plot results:
    figure;
    hold on;
    grid on;
    box on
    plot(t, y);
    legend('x','y','\phi','dx','dy','d\phi');
    print(gcf,'-r600','-djpeg','Problem_44_Output.jpg');
    
    % This function implements the right hand side of the differential
    % equation. 
    function y_dot = ODE(~, y)
        q_     = y(1:3);
        q_dot_ = y(4:end);
        % *************************************************************************
        % ToDo:                                                                  
        % compute q_ddot by solving the constraint equations of motion.  You can
        % use the autogenerated functions from problem 43 to implement this quick
        % *************************************************************************
        A = A_fct(q_(1), q_(2), q_(3), q_dot_(1), q_dot_(2), q_dot_(3), m, theta, grav, d);
        b = b_fct(q_(1), q_(2), q_(3), q_dot_(1), q_dot_(2), q_dot_(3), m, theta, grav, d);
        result = A\b;
        q_ddot_ = result(1:3);
        % Prepare the output variable y_dot:
        y_dot = zeros(6,1);
        y_dot(1:3)   = q_dot_;
        y_dot(4:end) = q_ddot_;
    end

    % This function is called at each integraton step to check whether an
    % event has happend (i.e., 'value' has changed it's sign).
    function [value, isterminal, direction] = events(~, y)
        % *************************************************************************
        % ToDo:                                                                  
        % Finish this event function.  First derive on paper which function you
        % need to implement for "value".  This is the functions that is checked for
        % a change in sign.  Then determine wether this change needs to happen from
        % '-' to '+' or the other way around and set the 'direction' flag
        % accordingly.  'isterminal' is set to 1, such that the integration is not
        % continued.
        % ***************************** ********************************************
        x_ = y(1);
        y_ = y(2);
        phi = y(3);
        A_BI = [ cos(phi) sin(phi) 0;
                -sin(phi) cos(phi) 0
                0         0        1];
            
        value      = [0 1 0] * ( A_BI * ( [x_;y_;0] - [s;0;0] ) - [0;d;0]);
        isterminal = 1;   % Abort the integration
        direction  = -1;
    end
end

